---
interface Props {
  hero: {
    eyebrow?: string;
    header?: string;
    description?: string;
    action?: {
      label: string;
      href: string;
    };
    videoTitle: string;
    videoSources: {
      src: string;
      type: 'video/mp4' | 'video/webm' | 'video/ogg';
    }[];
  };
  fallbackImg?: {
    src: string;
    alt: string;
  };
}
const { hero, fallbackImg } = Astro.props as Props;

const { eyebrow, header, description, action, videoTitle } = hero;
---

<div class="not-prose mt-[-76px] snap-center">
  <section class="relative h-dvh w-screen overflow-hidden text-center">
    {
      (eyebrow || header || action) && (
        <div class="relative z-30 flex h-full flex-col">
          {(eyebrow || header || description) && (
            <div class="text-white">
              {eyebrow && <p class="pt-40 text-base font-bold tracking-wide uppercase">{eyebrow}</p>}
              {header && (
                <h1 class="leading-tighter font-heading mb-4 text-5xl font-bold tracking-tighter md:text-6xl dark:text-gray-200">
                  {header}
                </h1>
              )}
              {description && <p class="px-12 text-[1.25rem]">{description}</p>}
            </div>
          )}
          {action && (
            <div class="flex grow flex-col justify-end pb-96">
              <div>
                <a
                  class="inline-block rounded-sm border-[3px] border-white bg-white/5 px-12 py-2 text-sm font-medium text-white backdrop-blur-xs transition-colors hover:bg-white hover:text-black"
                  href={action.href}
                >
                  {action.label}
                </a>
              </div>
            </div>
          )}
        </div>
      )
    }
    <div class="absolute top-0 bottom-0 z-10 h-full w-full">
      <video
        class="h-full w-full object-cover object-center"
        playsinline
        autoplay
        muted
        loop
        poster={fallbackImg?.src ?? ''}
        title={videoTitle}
        id="home-video"
      >
        {hero.videoSources.map(({ src, type }) => <source src={src} type={type} />)}
      </video>
    </div>
  </section>
</div>
