---
import { Icon } from 'astro-icon/components';
import Button from '~/components/ui/Button.astro';
import Headline from '~/components/ui/Headline.astro';
import WidgetWrapper from '~/components/ui/WidgetWrapper.astro';
import type { Pricing as Props } from '~/types';

const {
  title = '',
  subtitle = '',
  tagline = '',
  prices = [],

  id,
  isDark = false,
  classes = {},
  bg = await Astro.slots.render('bg'),
} = Astro.props;
---

<WidgetWrapper id={id} isDark={isDark} containerClass={`max-w-7xl mx-auto ${classes?.container ?? ''}`} bg={bg}>
  <Headline title={title} subtitle={subtitle} tagline={tagline} />
  <div class="flex items-stretch justify-center">
    <div class="grid grid-cols-3 gap-4 sm:grid-cols-2 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-3 dark:text-white">
      {
        prices &&
          prices.map(({ title, subtitle, price, period, items, callToAction, hasRibbon = false, ribbonTitle }) => (
            <div class="col-span-3 mx-auto flex w-full sm:col-span-1 md:col-span-1 lg:col-span-1 xl:col-span-1">
              {price && period && (
                <div class="flex w-full max-w-sm flex-col justify-between rounded-lg border border-gray-200 bg-white px-6 py-8 text-center shadow-sm backdrop-blur-sm dark:border-gray-700 dark:bg-slate-900">
                  {hasRibbon && ribbonTitle && (
                    <div class="absolute top-[-5px] right-[-5px] z-1 h-[100px] w-[100px] overflow-hidden text-right 2xl:top-[-10px] 2xl:right-[-8px] rtl:right-auto rtl:left-[-8px] 2xl:rtl:left-[-10px]">
                      <span class="absolute top-[19px] right-[-21px] block w-full rotate-45 bg-green-700 text-center text-[10px] leading-5 font-bold text-white uppercase shadow-[0_3px_10px_-5px_rgba(0,0,0,0.3)] before:absolute before:top-full before:left-0 before:z-[-1] before:border-[3px] before:border-t-green-800 before:border-r-transparent before:border-b-transparent before:border-l-green-800 before:content-[''] after:absolute after:top-full after:right-0 after:z-[-1] after:border-[3px] after:border-t-green-800 after:border-r-green-800 after:border-b-transparent after:border-l-transparent after:content-[''] rtl:right-auto rtl:left-[-21px] rtl:-rotate-45">
                        {ribbonTitle}
                      </span>
                    </div>
                  )}
                  <div class="px-2 py-0">
                    {title && (
                      <h3 class="mb-2 text-center text-xl leading-6 font-semibold tracking-wider uppercase">{title}</h3>
                    )}
                    {subtitle && <p class="font-light text-gray-600 sm:text-lg dark:text-slate-400">{subtitle}</p>}
                    <div class="my-8">
                      <div class="mb-1 flex items-center justify-center text-center">
                        <span class="text-5xl">$</span>
                        <span class="text-6xl font-extrabold">{price}</span>
                      </div>
                      <span class="text-base leading-6 text-gray-600 lowercase dark:text-slate-400">{period}</span>
                    </div>
                    {items && (
                      <ul class="my-8 space-y-2 text-left md:my-10">
                        {items.map(
                          ({ description, icon }) =>
                            description && (
                              <li class="mb-1.5 flex items-start space-x-3 leading-7">
                                <div class="bg-primary mt-1 rounded-full">
                                  <Icon name={icon ? icon : 'tabler:check'} class="h-5 w-5 p-1 font-bold text-white" />
                                </div>
                                <span>{description}</span>
                              </li>
                            )
                        )}
                      </ul>
                    )}
                  </div>
                  {callToAction && (
                    <div class={`flex justify-center`}>
                      {typeof callToAction === 'string' ? (
                        <Fragment set:html={callToAction} />
                      ) : (
                        callToAction &&
                        callToAction.href && <Button {...(hasRibbon ? { variant: 'primary' } : {})} {...callToAction} />
                      )}
                    </div>
                  )}
                </div>
              )}
            </div>
          ))
      }
    </div>
  </div>
</WidgetWrapper>
